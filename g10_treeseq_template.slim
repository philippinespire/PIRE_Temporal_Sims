// Keywords: nonWF, non-Wright-Fisher, tree sequence, chromosome
// This script uses a preset pedigree to generate a tree sequence for a given chromosome.

// function for reading table of matings/deaths from recipe
function (i)readIntTable(s$ path)
{
	if (!fileExists(path))
		stop("readIntTable(): File not found at path " + path);
	l = readFile(path);
	m = sapply(l, "asInteger(strsplit(applyValue));", simplify="matrix");
	return t(m);
}

// simplified nonWF model - I am not specifying as sexes were included in the pedigree-generating model
initialize() {
	initializeSLiMModelType("nonWF");
	initializeTreeSeq();
	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = F;
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 29999999);
	initializeMutationRate(0);
	initializeRecombinationRate(1e-8);
	defineConstant("M", readIntTable(matingfile));
	defineConstant("Mg",drop(M[,0]));
	defineConstant("D", readIntTable(deathfile));
	defineConstant("Dg",drop(M[,0]));
// Life table and stable age distribution - just need this for setting up initial population	
	defineConstant("L",c(0.5,0.36,0.25,0.2,0.15,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.4,0.6,0.7,0.8,0.9,1));
	defineConstant("a1",asInteger((1-L[0])*Nhistoric));
	defineConstant("a2",asInteger((1-L[1])*a1));
	defineConstant("a3",asInteger((1-L[2])*a2));
	defineConstant("a4",asInteger((1-L[3])*a3));
	defineConstant("a5",asInteger((1-L[4])*a4));
	defineConstant("a6",asInteger((1-L[5])*a5));
	defineConstant("a7",asInteger((1-L[6])*a6));
	defineConstant("a8",asInteger((1-L[7])*a7));
	defineConstant("a9",asInteger((1-L[8])*a8));
	defineConstant("a10",asInteger((1-L[9])*a9));
	defineConstant("a11",asInteger((1-L[10])*a10));
	defineConstant("a12",asInteger((1-L[11])*a11));
	defineConstant("a13",asInteger((1-L[12])*a12));
	defineConstant("a14",asInteger((1-L[13])*a13));
	defineConstant("a15",asInteger((1-L[14])*a14));
	defineConstant("a16",asInteger((1-L[15])*a15));
	defineConstant("a17",asInteger((1-L[16])*a16));
	defineConstant("a18",asInteger((1-L[17])*a17));
	defineConstant("a19",asInteger((1-L[18])*a18));
	defineConstant("a20",asInteger((1-L[18])*a19));
	defineConstant("Ninit",Nhistoric+a1+a2+a3+a4+a5+a6+a7+a8+a9+a10+a11+a12+a13+a14+a15+a16+a17+a18+a19+a20);
}

// set passed variables as simulation variables
1 early() {
	sim.setValue("matingfile", matingfile);
	sim.setValue("deathfile", deathfile);
	sim.setValue("generationfile", generationfile);
	sim.setValue("t0sampfile", t0sampfile);
	sim.setValue("t90sampfile", t90sampfile);
	sim.setValue("t60sampfile", t60sampfile);
	sim.setValue("t30sampfile", t30sampfile);
	sim.setValue("t120sampfile", t120sampfile);
	sim.setValue("treeseqfile",treeseqfile);
}

// generate offspring from based on pre-generated pedigree
reproduction() {
	// generate all offspring for the generation
	m = M[Mg == sim.generation,];
	
	for (index in seqLen(nrow(m))) {
		row = m[index,];
		ind = p1.subsetIndividuals(tag=row[,1]);
		mate = p1.subsetIndividuals(tag=row[,2]);
		child = p1.addCrossed(ind, mate);
		child.tag = row[,3];
	}
	gendat=c("generation:",sim.generation);   
	genline=paste(gendat,sep=" ");
	writeFile(generationfile,genline,append=T);
	self.active = 0;
}

// First generation: set # of offspring and K to Nhistoric. Removing ages - shouldn't matter...
1 early() {
	sim.setValue("K", Nhistoric);
	sim.addSubpop("p1", Ninit);
	// provide initial tags and remember the next tag value
	p1.individuals.tag = 1:Ninit;
	sim.tag = Ninit+1;
}

early() {
	// execute the predetermined mortality
	inds = p1.individuals;
	inds.fitnessScaling = 1.0;
	
	d = drop(D[Dg == sim.generation, 1]);
	indices = match(d, inds.tag);
	inds[indices].fitnessScaling = 0.0;

// Tree sequence - remember individuals from each potential sampling time point. Changing this from previous scenarios to only sample 100 individuals per time point.
100 late()
{	
	sampind=NULL;
	t120samps=asInteger(readFile(t120sampfile));
	for (i in seqLen(length(t120samps)))
	{sampind=c(sampind,p1.subsetIndividuals(tag=t120samps[i]));};
	sim.treeSeqRememberIndividuals(sampind); 
}

130 late()
{	
	sampind=NULL;
	t90samps=asInteger(readFile(t90sampfile));
	for (i in seqLen(length(t90samps)))
	{sampind=c(sampind,p1.subsetIndividuals(tag=t90samps[i]));};
	sim.treeSeqRememberIndividuals(sampind); 
}

160 late() 
{	
	sampind=NULL;
	t60samps=asInteger(readFile(t60sampfile));
	for (i in seqLen(length(t60samps)))
	{sampind=c(sampind,p1.subsetIndividuals(tag=t60samps[i]));};
	sim.treeSeqRememberIndividuals(sampind); 
}

190 late()
{	
	sampind=NULL;
	t30samps=asInteger(readFile(t30sampfile));
	for (i in seqLen(length(t30samps)))
	{sampind=c(sampind,p1.subsetIndividuals(tag=t30samps[i]));};
	sim.treeSeqRememberIndividuals(sampind); 
}

220 late()
{	
	sampind=NULL;
	t0samps=asInteger(readFile(t0sampfile));
	for (i in seqLen(length(t0samps)))
	{sampind=c(sampind,p1.subsetIndividuals(tag=t0samps[i]));};
	sim.treeSeqRememberIndividuals(sampind); 
}

// OUTPUT FILES for treeseq

220 late() { sim.treeSeqOutput(treeseqfile); }